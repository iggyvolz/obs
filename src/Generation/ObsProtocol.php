<?php

namespace iggyvolz\obs\Generation;

use Nette\PhpGenerator\PhpFile;
use Nette\PhpGenerator\PsrPrinter;

final class ObsProtocol
{
    /**
     * @param ObsEnum[] $enums
     * @param ObsRequest[] $requests
     * @param ObsEvent[] $events
     */
    public function __construct(
        /** @var ObsEnum[] */
        public readonly array $enums,
        /** @var ObsRequest[] */
        public readonly array $requests,
        /** @var ObsEvent[] */
        public readonly array $events,
    )
    {
    }

    public function save(): void
    {
        $file = new PhpFile();
        $trait = $file->setStrictTypes()->addNamespace("iggyvolz\\obs")->addClass("Obs_")->setTrait()->addComment("@autogenerated");
        foreach([...$this->enums, ...$this->requests, ...$this->events] as $x) {
            $x->save($trait);
        }
        file_put_contents(__DIR__ . "/../Obs_.php", (new PsrPrinter())->printFile($file));
    }


    /**
     * @param ObsField $field
     * @return array{0:string,1:string}
     */
    public static function getType(ObsField $field): array
    {
        return match ($field->valueType) {
            "String" => ["string", "string"],
            "Number" => ["int", "int"],
            "Boolean" => ["bool", "bool"],
            // TODO make these actual objects
            "Object" => ["mixed", "mixed"],
            "Array<Object>" => ["array", "list<mixed>"],
            "Array<String>" => ["array", "list<string>"],
            "Any" => ["mixed", "mixed"],
        };
    }
}