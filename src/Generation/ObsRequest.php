<?php

namespace iggyvolz\obs\Generation;

use Amp\Future;
use Nette\PhpGenerator\ClassType;
use Nette\PhpGenerator\PhpFile;
use Nette\PhpGenerator\PsrPrinter;

final class ObsRequest implements Savable
{
    /**
     * @param ObsRequestField[] $requestFields
     * @param ObsField[] $responseFields
     */
    public function __construct(
        public readonly string $description,
        public readonly string $requestType,
        public readonly int $complexity,
        public readonly string $rpcVersion,
        public readonly bool $deprecated,
        public readonly string $initialVersion,
        public readonly string $category,
        /** @var ObsRequestField[] */
        public readonly array $requestFields,
        /** @var ObsField[] */
        public readonly array $responseFields,
    )
    {
    }

    public function save(ClassType $trait): void
    {
        $file = new PhpFile();
        $class = $file->setStrictTypes()->addNamespace("iggyvolz\\obs\\Requests")->addClass($this->requestType)->setTrait()->addComment("@autogenerated");
        $method = $class->addMethod(lcfirst($this->requestType))->setReturnType(Future::class);
        $trait->addTrait("\\iggyvolz\\obs\\Requests\\$this->requestType");
        foreach($this->requestFields as $requestField) {
            $fieldName = str_replace("?", "", $requestField->valueName);
            if(str_contains($fieldName, ".")) continue;
            $parameter = $method->addParameter($fieldName);
            [$type, $dbtype] = ObsProtocol::getType($requestField);
            if($requestField->valueOptional && $type !== "mixed") {
                $type = "null|$type";
                $dbtype = "null|$dbtype";
                $parameter->setDefaultValue(null);
            }
            $parameter->setType($type);
            $method->addComment("@param $dbtype \$$fieldName $requestField->valueDescription");
        }
        $args = "[\n";
        foreach($this->requestFields as $requestField) {
            $args .= "\t\"$requestField->valueName\" => \$$requestField->valueName,\n";
        }
        $args .= "]";
        if(empty($this->responseFields)) {
            $method->addComment("@return \\" . Future::class . "<void>");
            $method->addBody("return \$this->request($args, \"$this->requestType\");");
        } else {
            $method->addComment("@return \\" . Future::class . "<\\iggyvolz\\obs\\Responses\\{$this->requestType}Response>");
            $method->addBody("return \$this->request($args, \"$this->requestType\", \\iggyvolz\\obs\\Responses\\{$this->requestType}Response::class);");

            $responseFile = new PhpFile();
            $responseClass = $responseFile->setStrictTypes()->addNamespace("iggyvolz\\obs\\Responses")->addClass("{$this->requestType}Response")->addComment("@autogenerated");
            $responseConstructor = $responseClass->addMethod("__construct");
            foreach ($this->responseFields as $responseField) {
                $field = $responseConstructor->addPromotedParameter($responseField->valueName);
                [$type, $dbtype] = ObsProtocol::getType($responseField);
                $field->setType($type)->setReadOnly();
                $responseConstructor->addComment("@param $dbtype \$$responseField->valueName");
            }
            file_put_contents(__DIR__ . "/../Responses/{$this->requestType}Response.php", (new PsrPrinter())->printFile($responseFile));
        }
        file_put_contents(__DIR__ . "/../Requests/$this->requestType.php", (new PsrPrinter())->printFile($file));
    }
}